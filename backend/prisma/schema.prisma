// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id        Int        @id @default(autoincrement())
  name      String     @db.VarChar(100)
  employees Employee[]
  positions Position[]

  @@index([name])
}

model Employee {
  id        Int         @id @default(autoincrement())
  companyId Int
  name      String      @db.VarChar(100)
  email     String      @unique @db.VarChar(255)
  role      String      @db.VarChar(50)
  isActive  Boolean     @default(true)
  company   Company     @relation(fields: [companyId], references: [id])
  interviews Interview[]

  @@index([companyId])
  @@index([email])
}

model InterviewType {
  id          Int            @id @default(autoincrement())
  name        String         @db.VarChar(100)
  description String?        @db.Text
  steps       InterviewStep[]

  @@index([name])
}

model InterviewFlow {
  id          Int             @id @default(autoincrement())
  description String          @db.VarChar(255)
  steps       InterviewStep[]
  positions   Position[]
}

model InterviewStep {
  id              Int           @id @default(autoincrement())
  interviewFlowId Int
  interviewTypeId Int
  name            String        @db.VarChar(100)
  orderIndex      Int
  interviewFlow   InterviewFlow @relation(fields: [interviewFlowId], references: [id])
  interviewType   InterviewType @relation(fields: [interviewTypeId], references: [id])
  interviews      Interview[]

  @@index([interviewFlowId])
  @@index([interviewTypeId])
  @@index([orderIndex])
}

model Position {
  id                  Int            @id @default(autoincrement())
  companyId           Int
  interviewFlowId     Int
  title               String         @db.VarChar(150)
  description         String?        @db.Text
  status              String         @db.VarChar(50)
  isVisible           Boolean        @default(true)
  location            String         @db.VarChar(100)
  jobDescription      String?        @db.Text
  requirements        String?        @db.Text
  responsibilities    String?        @db.Text
  salaryMin           Decimal?       @db.Decimal(10, 2)
  salaryMax           Decimal?       @db.Decimal(10, 2)
  employmentType      String         @db.VarChar(50)
  benefits            String?        @db.Text
  companyDescription  String?        @db.Text
  applicationDeadline DateTime?
  contactInfo         String?        @db.VarChar(255)
  company             Company        @relation(fields: [companyId], references: [id])
  interviewFlow       InterviewFlow  @relation(fields: [interviewFlowId], references: [id])
  applications        Application[]

  @@index([companyId])
  @@index([interviewFlowId])
  @@index([status])
  @@index([isVisible])
  @@index([location])
  @@index([employmentType])
  @@index([title])
}

model Candidate {
  id                Int               @id @default(autoincrement())
  firstName         String            @db.VarChar(100)
  lastName          String            @db.VarChar(100)
  email             String            @unique @db.VarChar(255)
  phone             String?           @db.VarChar(15)
  address           String?           @db.VarChar(100)
  educations        Education[]
  workExperiences   WorkExperience[]
  resumes           Resume[]
  applications      Application[]

  @@index([firstName, lastName])
  @@index([email])
}

model Education {
  id            Int       @id @default(autoincrement())
  institution   String    @db.VarChar(100)
  title         String    @db.VarChar(250)
  startDate     DateTime
  endDate       DateTime?
  candidateId   Int
  candidate     Candidate @relation(fields: [candidateId], references: [id])

  @@index([candidateId])
  @@index([institution])
  @@index([startDate, endDate])
}

model WorkExperience {
  id          Int       @id @default(autoincrement())
  company     String    @db.VarChar(100)
  position    String    @db.VarChar(100)
  description String?   @db.VarChar(200)
  startDate   DateTime
  endDate     DateTime?
  candidateId Int
  candidate   Candidate @relation(fields: [candidateId], references: [id])

  @@index([candidateId])
  @@index([company])
  @@index([position])
  @@index([startDate, endDate])
}

model Resume {
  id          Int       @id @default(autoincrement())
  filePath    String    @db.VarChar(500)
  fileType    String    @db.VarChar(50)
  uploadDate  DateTime
  candidateId Int
  candidate   Candidate @relation(fields: [candidateId], references: [id])

  @@index([candidateId])
  @@index([uploadDate])
  @@index([fileType])
}

model Application {
  id               Int         @id @default(autoincrement())
  positionId       Int
  candidateId      Int
  applicationDate  DateTime    @default(now())
  status           String      @db.VarChar(50)
  notes            String?     @db.Text
  position         Position    @relation(fields: [positionId], references: [id])
  candidate        Candidate   @relation(fields: [candidateId], references: [id])
  interviews       Interview[]

  @@index([positionId])
  @@index([candidateId])
  @@index([applicationDate])
  @@index([status])
}

model Interview {
  id              Int           @id @default(autoincrement())
  applicationId   Int
  interviewStepId Int
  employeeId      Int
  interviewDate   DateTime
  result          String?       @db.VarChar(50)
  score           Int?
  notes           String?       @db.Text
  application     Application   @relation(fields: [applicationId], references: [id])
  interviewStep   InterviewStep @relation(fields: [interviewStepId], references: [id])
  employee        Employee      @relation(fields: [employeeId], references: [id])

  @@index([applicationId])
  @@index([interviewStepId])
  @@index([employeeId])
  @@index([interviewDate])
  @@index([result])
}